十分钟看懂数据库——数据库入门级语言总结
2016年07月31日 11:25:21
阅读数：12117
从sql入门经典，到sql视频，再到自考的数据库系统原理，不知不觉中我们已经走进了数据库的世界，那么什么叫数据库，他又是干什么用的呢？

咱们先看一下百度给的解释啊。

数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。

在信息化社会，充分有效地管理和利用各类信息资源，是进行科学研究和决策管理的前提条件。数据库技术是管理信息系统、办公自动化系统、决策支持系统等各类信息系统的核心部分，是进行科学研究和决策管理的重要技术手段。

他是一种特别强大的工具，实用性特别大，对于一些学校，公司的管理至关重要，既然他那么好，我们怎么去使用他啊。

这里我们先介绍一些简单的数据库语言吧，这是基础，只有懂了这个才能看得懂数据库，更好地使用数据库。

1、创建数据库

CREATE DATABASE database-name 

2、删除数据库

drop database dbname

3、：备份sql server

--- 创建 备份数据的 device

USE master

EXEC sp_addumpdevice 'disk', 'testBack','c:\mssql7backup\MyNwind_1.dat'

- -- 开始 备份

BACKUP DATABASE pubs TO testBack 

4、创建新表

create table tabname(col1 type1 [not null] [primarykey],col2 type2 [not null],..)

根据已有的表创建新表： 

A：create table tab_new like tab_old (使用旧表创建新表)

B：create table tab_new as select col1,col2… from tab_old definition only

5：删除新表

drop table tabname 

6、增加一个列

Alter table tabname add column col type

注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。

7、添加主键： Alter table tabname add primarykey(col) 

说明：删除主键： Alter table tabname dropprimary key(col) 

8、创建索引：create [unique] index idxname ontabname(col….) 

删除索引：drop index idxname

注：索引是不可更改的，想更改必须删除重新建。

9、创建视图：create view viewname as selectstatement 

删除视图：drop view viewname

     10、几个简单的基本的sql语句

选择：select * from table1 where 范围

插入：insert intotable1(field1,field2) values(value1,value2)

删除：delete from table1 where 范围

更新：update table1 set field1=value1where 范围

查找：select * from table1 wherefield1 like ’%value1%’ ---like的语法很精妙，查资料!

排序：select * from table1 order byfield1,field2 [desc]

总数：select count as totalcount fromtable1

求和：select sum(field1) as sumvaluefrom table1

平均：select avg(field1) as avgvaluefrom table1

最大：select max(field1) as maxvaluefrom table1

最小：select min(field1) as minvaluefrom table1

11、说明：几个高级查询运算词

A： UNION 运算符 

UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。 

B： EXCEPT 运算符 

EXCEPT运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。

C： INTERSECT 运算符

INTERSECT运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。 

注：使用运算词的几个查询结果行必须是一致的。 

12、说明：使用外连接 

A、left （outer） join： 

左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。 

SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFTOUT JOIN b ON a.a = b.c

B：right （outer） join: 

右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。 

C：full/cross （outer） join： 

全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。

13、分组:Group by:

一张表，一旦分组 完成后，查询后只能得到组相关的信息。

组相关的信息：（统计信息） count,sum,max,min,avg分组的标准)

在SQLServer中分组时：不能以text,ntext,image类型的字段作为分组依据

在selecte统计函数中的字段，不能和普通的字段放在一起；

14、对数据库进行操作：

分离数据库： sp_detach_db;附加数据库：sp_attach_db 后接表明，附加需要完整的路径名

14.如何修改数据库的名称:

sp_renamedb 'old_name', 'new_name'

下面说的是实战教程，主要讲学生管理数据库。

更深一步，更详细一点的东西。

基础部分
查询

SELECT 姓名 as 学生姓名,性别 from学生信息        查询出来的列名是 学生姓名，性别，

SELECT DISTINCT 民族 from 学生信息            DISTINCT的作用是防止结果重复SELECT * FROM 员工信息 WHERE 民族='汉族' AND 性别='女'AND 家庭住址='河南商丘'

 或

SELECT * FROM 员工信息 WHERE 民族='汉族' AND 性别='女' AND 家庭住址 like '河南%'

                                  % 表示通配符，like的作用与等号相似

排序ORDER BY

SELECT * FROM 成绩信息 WHERE 考试编号='0801'AND 课程编号='1'

ORDER BY 分数 DESC,学生编号  DESC表示降序，ASC表示升序（默认）

 

分组

SELECT 考试编号,课程编号,AVG(分数) FROM 成绩信息 WHERE 考试编号='0801'GROUP BYcobe 课程编号

SELECT 考试编号,课程编号,AVG(分数) FROM 成绩信息 GROUP BY cobe 课程编号

cobe ()

rollup()

CUBE 运算符生成的结果集是多维数据集。多维数据集是事实数据的扩展，事实数据即记录个别事件的数据。扩展建立在用户打算分析的列上。这些列被称为维。多维数据集是一个结果集，其中包含了各维度的所有可能组合的交叉表格。

 

CUBE 运算符在 SELECT 语句的 GROUPBY 子句中指定。该语句的选择列表应包含维度列和聚合函数表达式。GROUP BY 应指定维度列和关键字 WITH CUBE。结果集将包含维度列中各值的所有可能组合，以及与这些维度值组合相匹配的基础行中的聚合值。

CUBE 和 ROLLUP 之间的区别在于： 

 

CUBE 生成的结果集显示了所选列中值的所有组合的聚合。

 

ROLLUP 生成的结果集显示了所选列中值的某一层次结构的聚合。

 

使用函数

SELECT TOP 3 分数 FROM 成绩信息WHERE 考试编号='0801' AND 考试编号='2'

RODER BY 分数 DESC

 

MIN()最小数 ； MAX()最大数 ； AVG()平均数 ； SUM()和； top number前几名

使用HAVING子句

SELECT 考试编号,课程编号,AVG(分数) FROM 成绩信息 GROUP BY cobe （课程编号）

HAVING AVG(分数)>=90

RODER BY 分数 DESC

插入数据

SELECT * FROM 学生信息

INSERT INTO 学生信息 (学号，姓名，家庭住址)  VALUES  ('2009100101','李明','河南'）

INTERT...SELECT语句

INTERT  学生信息1

Select * FROM 学生信息 where 家庭住址 like '河南'

SELECT...INTO语句

SELECT *

into #STUDENT          ‘临时表’

from 学生信息

where 性别='男

update 语句

select * from 学生信息

update 学生信息 set 姓名='李俊'，出生日期=‘1994-4-8’ where 学号=‘12345’

扩展部分
 

1.在查询结果中显示列名：
a.用as关键字：select name as '姓名'   from students order by age
b.直接表示：select name '姓名'   from students order byage

2.精确查找:
a.用in限定范围：select * fromstudents where native in ('湖南', '四川') 
b.between...and：select * from students where age between 20 and 30
c.“=”：select * fromstudents where name = '李山' 
d.like:select * from students where name  like  '李%' (注意查询条件中有“%”，则说明是部分匹配，而且还有先后信息在里面，即查找以“李”开头的匹配项。所以若查询有“李”的所有对象，应该命令：'%李%';若是第二个字为李，则应为'_李%'或'_李'或'_李_'。)
e.[]匹配检查符：select * from courses where cno like '[AC]%' (表示或的关系，与"in(...)"类似，而且"[]"可以表示范围，如：select * fromcourses where cno like '[A-C]%')


3.对于时间类型变量的处理
a.smalldatetime：直接按照字符串处理的方式进行处理，例如：
 select * from students where birth > = '1980-1-1' and birth <= '1980-12-31'


4.集函数
a.count()求和，如：selectcount(*)  from students (求学生总人数)
b.avg(列)求平均，如：selectavg(mark)  from grades where cno=’B2’
c.max(列)和min(列)，求最大与最小

5.分组group
常用于统计时，如分组查总数：
  select gender,count(sno)  
  from students
  group by gender
(查看男女学生各有多少)
注意：从哪种角度分组就从哪列"group by"
对于多重分组，只需将分组规则罗列。比如查询各届各专业的男女同学人数 ，那么分组规则有：届别(grade)、专业(mno)和性别(gender)，所以有"groupby grade, mno, gender"
select grade, mno, gender, count(*)
from students
group by grade, mno, gender
通常group还和having联用，比如查询1门课以上不及格的学生，则按学号(sno)分类有：
select sno,count(*) from grades 
where mark<60
group by sno
having count(*)>1


6.UNION联合
合并查询结果，如：
SELECT * FROM students
WHERE name like ‘张%’
UNION [ALL]
SELECT * FROM students
WHERE name like ‘李%’

注意union与unionall的区别：

前者要把重复项做个过滤，在结果中只显示一条重复的信息；而后者则不管。所以可以看出union与 union all所用算法不同，后者要简单许多。从调优角度上讲，推荐用union all，这样查询效率会提高不少。


7.多表查询
a.内连接
selectg.sno,s.name,c.coursename 
   from grades g JOIN students s ON g.sno=s.sno
       JOIN courses c ON  g.cno=c.cno
(注意可以引用别名)
b.外连接
b1.左连接
selectcourses.cno,max(coursename),count(sno) 
from courses LEFT JOIN grades ON courses.cno=grades.cno 
group by courses.cno
左连接特点：显示全部左边表中的所有项目，即使其中有些项中的数据未填写完全。

左外连接返回那些存在于左表而右表中却没有的行，再加上内连接的行。
b2.右连接
与左连接类似
b3.全连接
selectsno,name,major 
from students FULL JOIN majors ON students.mno=majors.mno
两边表中的内容全部显示
c.自身连接
selectc1.cno,c1.coursename,c1.pno,c2.coursename 
from courses c1,courses c2  where c1.pno=c2.cno
采用别名解决问题。
d.交叉连接
selectlastname+firstname from lastname CROSS JOIN firstanme
相当于做笛卡儿积


8.嵌套查询
a.用关键字IN,如查询李山的同乡：
select  *  from students
where  native  in  (select native from students where name=’ 李山’) 
b.使用关键字EXIST,比如，下面两句是等价的：
select * fromstudents
where sno in (select sno from grades where cno=’B2’)

select * fromstudents where exists  
(select * from grades where 
grades.sno=students.sno AND cno=’B2’)

 


9.关于排序order
a.对于排序order，有两种方法：asc升序和desc降序
b.对于排序order,可以按照查询条件中的某项排列，而且这项可用数字表示，如：
selectsno,count(*) ,avg(mark) from grades 
group by sno
having avg(mark)>85
order by 3

10.其他
a.对于有空格的识别名称，应该用"[]"括住。
b.对于某列中没有数据的特定查询可以用null判断，如select sno,courseno from grades where mark IS NULL
c.注意区分在嵌套查询中使用的any与all的区别，any相当于逻辑运算“||”而all则相当于逻辑运算“&&”
d.注意在做否定意义的查询是小心进入陷阱：
如，没有选修‘B2’课程的学生 ：
select students.*
from students, grades
where students.sno=grades.sno
          AND grades.cno <>’B2’                  
上面的查询方式是错误的，正确方式见下方：
select * from students
where not exists  (select * from grades 
where grades.sno=students.sno AND cno='B2')

11.关于有难度多重嵌套查询的解决思想：
如，选修了全部课程的学生：
select *
from students
where not exists (       select *
   from courses
   where NOT EXISTS 
    (select *
      from grades
      where sno=students.sno
     AND cno=courses.cno))
   以上是关于我看数据库视频的知识点总结，和一些扩展使用，以及我希望学习的东西。（注：部分内容来之网络）
